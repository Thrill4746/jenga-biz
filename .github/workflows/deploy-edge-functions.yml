name: Deploy Edge Functions

on:
  push:
    branches: [main, staging]
    paths: 
      - 'supabase/functions/**'
      - 'supabase/migrations/**'
      - '.github/workflows/deploy-edge-functions.yml'
  pull_request:
    paths:
      - 'supabase/functions/**'
      - 'supabase/migrations/**'

env:
  SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}

jobs:
  lint-and-test:
    name: Lint & Test Edge Functions
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Lint TypeScript files
        run: |
          npx eslint "supabase/functions/**/*.ts" --fix
          npx prettier --check "supabase/functions/**/*.ts"

      - name: Type check edge functions
        run: |
          npx tsc --noEmit --project supabase/functions/tsconfig.json

      - name: Run security scan with Semgrep
        uses: semgrep/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/typescript
            p/owasp-top-ten
          generateSarif: "1"

      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: semgrep.sarif
        if: always()

      - name: Test edge functions locally
        run: |
          # Start local Supabase (with test database)
          npx supabase start
          
          # Wait for services to be ready
          sleep 30
          
          # Deploy functions locally
          npx supabase functions deploy --no-verify-jwt
          
          # Run integration tests
          npm run test:edge-functions
          
          # Stop local instance
          npx supabase stop

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.ref == 'refs/heads/staging' || github.event_name == 'pull_request'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Apply database migrations
        run: |
          supabase db push --project-ref ${{ secrets.SUPABASE_STAGING_PROJECT_REF }}
        env:
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_STAGING_DB_PASSWORD }}

      - name: Deploy edge functions to staging
        run: |
          supabase functions deploy --project-ref ${{ secrets.SUPABASE_STAGING_PROJECT_REF }} --no-verify-jwt
          
      - name: Set edge function secrets
        run: |
          # Set environment variables for edge functions
          supabase secrets set SUPABASE_URL=${{ secrets.SUPABASE_STAGING_URL }} --project-ref ${{ secrets.SUPABASE_STAGING_PROJECT_REF }}
          supabase secrets set SUPABASE_ANON_KEY=${{ secrets.SUPABASE_STAGING_ANON_KEY }} --project-ref ${{ secrets.SUPABASE_STAGING_PROJECT_REF }}
          supabase secrets set SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_STAGING_SERVICE_ROLE_KEY }} --project-ref ${{ secrets.SUPABASE_STAGING_PROJECT_REF }}
          supabase secrets set RESEND_API_KEY=${{ secrets.RESEND_API_KEY }} --project-ref ${{ secrets.SUPABASE_STAGING_PROJECT_REF }}

      - name: Run smoke tests against staging
        run: |
          npm run test:smoke -- --env=staging
        env:
          STAGING_API_URL: ${{ secrets.SUPABASE_STAGING_FUNCTIONS_URL }}
          STAGING_ANON_KEY: ${{ secrets.SUPABASE_STAGING_ANON_KEY }}

      - name: Comment on PR with staging deployment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'ðŸš€ Edge functions deployed to staging! \n\n**Test endpoints:**\n- User Management: `${{ secrets.SUPABASE_STAGING_FUNCTIONS_URL }}/user-management`\n- Financial Management: `${{ secrets.SUPABASE_STAGING_FUNCTIONS_URL }}/financial-management`\n\nPlease test thoroughly before merging to main.'
            })

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: lint-and-test
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Apply database migrations (production)
        run: |
          supabase db push --project-ref ${{ secrets.SUPABASE_PROD_PROJECT_REF }}
        env:
          SUPABASE_DB_PASSWORD: ${{ secrets.SUPABASE_PROD_DB_PASSWORD }}

      - name: Deploy edge functions to production
        run: |
          supabase functions deploy --project-ref ${{ secrets.SUPABASE_PROD_PROJECT_REF }} --no-verify-jwt

      - name: Set edge function secrets (production)
        run: |
          supabase secrets set SUPABASE_URL=${{ secrets.SUPABASE_PROD_URL }} --project-ref ${{ secrets.SUPABASE_PROD_PROJECT_REF }}
          supabase secrets set SUPABASE_ANON_KEY=${{ secrets.SUPABASE_PROD_ANON_KEY }} --project-ref ${{ secrets.SUPABASE_PROD_PROJECT_REF }}
          supabase secrets set SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_PROD_SERVICE_ROLE_KEY }} --project-ref ${{ secrets.SUPABASE_PROD_PROJECT_REF }}
          supabase secrets set RESEND_API_KEY=${{ secrets.RESEND_API_KEY }} --project-ref ${{ secrets.SUPABASE_PROD_PROJECT_REF }}

      - name: Run production health checks
        run: |
          npm run test:health -- --env=production
        env:
          PROD_API_URL: ${{ secrets.SUPABASE_PROD_FUNCTIONS_URL }}
          PROD_ANON_KEY: ${{ secrets.SUPABASE_PROD_ANON_KEY }}

      - name: Create deployment notification
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const deploymentData = {
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              description: 'Edge functions deployed successfully',
              auto_inactive: false
            };
            
            const deployment = await github.rest.repos.createDeployment(deploymentData);
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: 'success',
              description: 'Edge functions are live in production',
              environment_url: '${{ secrets.SUPABASE_PROD_FUNCTIONS_URL }}'
            });

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed. Consider manual rollback if needed."
          # Could implement automated rollback logic here
          # For now, just log the failure for manual intervention

  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run performance tests
        run: |
          npm run test:performance
        env:
          PROD_API_URL: ${{ secrets.SUPABASE_PROD_FUNCTIONS_URL }}
          PROD_ANON_KEY: ${{ secrets.SUPABASE_PROD_ANON_KEY }}
          
      - name: Generate performance report
        run: |
          npm run report:performance > performance-report.md
          
      - name: Comment performance results
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('performance-report.md', 'utf8');
            
            await github.rest.repos.createCommitComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              commit_sha: context.sha,
              body: `## ðŸ“Š Performance Report\n\n${report}`
            });